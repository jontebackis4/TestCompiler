version: 2.1

orbs:
  slack: circleci/slack@2.0.0

jobs:
  build-test:
    working_directory: ~/repo

    docker:
      # - image: mcr.microsoft.com/dotnet/core/sdk:2.2
      - image: applejag/mellis-testrunner

    steps:
      # Checkout repo -> ~/repo
      - checkout

      # Restore NuGet packages
      - run:
          name: Restore NuGet packages
          command: dotnet restore src/Mellis.all.sln

      # Build dlls -> ~/bin
      - run:
          name: Build all projects
          command: dotnet build src/Mellis.all.sln -c Debug -o ~/bin --no-restore

      # Test results -> ~/tests/trx
      - run:
          name: Test projects
          # this is using custom script dotnet_test.sh
          command: dotnet_test.sh -c Debug src/Mellis.all.sln -o ~/bin -r ~/tests/trx

      - run:
          name: Convert test results, ~/tests/trx -> ~/tests/xml
          when: always
          command: |
            echo "Converting test results"
            find ~/tests/trx -name *.trx -exec trx2junit --output ~/tests/xml {} +

      # Store test result xmls
      - store_test_results:
          name: store test results -> ~/tests/xml
          path: ~/tests/xml

      - run:
          command: |
            echo 'export BUILD_STATUS="fail"' >> $BASH_ENV
          name: Setting Failure Condition
          when: on_fail
      - run:
          command: |
            echo 'export BUILD_STATUS="success"' >> $BASH_ENV
          name: Setting Success Condition
          when: on_success
          
      - run:
          name: Send Slack notification
          when: always
          command: slack_notify_testrunner.sh

  deploy-github:
    working_directory: ~/repo

    docker:
      # - image: mcr.microsoft.com/dotnet/core/sdk:2.2
      - image: applejag/mellis-upm

    steps:
      
      # Checkout repo -> ~/repo
      - checkout

      # Restore NuGet packages
      - run:
          name: Restore NuGet packages for Mellis.no-tests
          command: dotnet restore src/Mellis.no-tests.sln

      # Publish dlls -> ~/publish
      - run:
          name: Publish all non-test projects (→ ~/publish)
          command: |
            dotnet publish src/Mellis.no-tests.sln -c Release -o ~/publish --no-restore

            # Get versions
            MELLIS_VERSION=$(get_dll_version.sh ~/publish/Mellis.dll)
            MELLIS_PYTHON3_VERSION=$(get_dll_version.sh ~/publish/Mellis.Lang.Python3.dll)
            echo ">>> Built Mellis v$MELLIS_VERSION, and Python3 module v$MELLIS_PYTHON3_VERSION"

            # Save to env
            echo "export MELLIS_VERSION=\"$MELLIS_VERSION\"" >> $BASH_ENV
            echo "export MELLIS_PYTHON3_VERSION=\"$MELLIS_PYTHON3_VERSION\"" >> $BASH_ENV
      - run:
          name: Login to git
          command: |
            set -o errexit

            # Variables used in git_login.sh
            : ${GITHUB_USER_NAME?}
            : ${GITHUB_USER_EMAIL?}
            : ${GITHUB_GPG_ID?}
            : ${GITHUB_GPG_SEC_B64?}
            if [ -n "${LOCAL:-}" ]; then
              : ${GITHUB_SSH_SEC_B64?}
            fi
            git_login.sh

      - run:
          name: Checkout publish branch (→ ~/upm)
          command: |
            : ${GITHUB_PUBLISH_BRANCH:=upm}
            : ${CIRCLE_REPOSITORY_URL?}

            git clone $CIRCLE_REPOSITORY_URL --single-branch --branch $GITHUB_PUBLISH_BRANCH ~/upm

      # TODO: generate .mdb files -> ~/publish

      - run:
          name: Prepare files for publish
          command: |
            move_upm_files.sh ~/publish ~/upm
            generate_metafiles.sh ~/upm

      - run:
          name: Push files
          command: |
            # Variables used in commit_upm.sh
            : ${MELLIS_VERSION?}
            : ${MELLIS_PYTHON3_VERSION?}
            : ${CIRCLE_REPOSITORY_URL?}
            : ${CIRCLE_BUILD_URL?}
            : ${CIRCLE_SHA1?}
            : ${CIRCLE_PROJECT_USERNAME?}
            : ${CIRCLE_PROJECT_REPONAME?}

            commit_upm.sh ~/upm
            
      - run:
          name: Trigger zardan/ui build
          command: |
            set +o errexit
            set +o pipefail
            
            : ${DEPLOY_STATUS:="fail"}
            : ${CIRCLE_API_KEY:=}
            : ${TRIGGER_UI_USER:="zardan"}
            : ${TRIGGER_UI_REPO:="ui"}
            : ${TRIGGER_UI_BRANCH:="develop"}

            if [[ "$DEPLOY_STATUS" != "success" ]]
            then
              echo "Did not deploy. Do not trigger ui build."
              echo "TRIGGER_UI='idle'" >> $BASH_ENV
            elif ! [[ "$CIRCLE_API_KEY" ]]
            then
              echo "No CircleCI API key. Can not trigger build."
              echo "TRIGGER_UI='fail'" >> $BASH_ENV
            else
              echo "Successfully deployed. Let's go trigger ui build."
              curl -X POST \
                --header "Content-Type: application/json" \
                --data "{
                  \"branch\": \"$TRIGGER_UI_BRANCH\"
                }" https://circleci.com/api/v1.1/project/github/$TRIGGER_UI_USER/$TRIGGER_UI_REPO/build?circle-token=$CIRCLE_API_KEY
              
              echo "TRIGGER_UI='success'" >> $BASH_ENV
            fi

      - run:
          command: |
            echo 'export BUILD_STATUS="fail"' >> $BASH_ENV
          name: Setting Failure Condition
          when: on_fail
      - run:
          command: |
            echo 'export BUILD_STATUS="success"' >> $BASH_ENV
          name: Setting Success Condition
          when: on_success

      - run:
          name: Send Slack notification
          when: always
          command: slack_notify_github_deploy.sh


workflows:
  version: 2.1

  work-build-test:
    jobs:
      - build-test:
          filters:
            branches:
              only:
                - /feature.*/

  work-build-test-deploy:
    jobs:
      - build-test:
          filters:
            branches:
              only:
                - rework

      - deploy-github:
          requires:
            - build-test
          filters:
            branches:
              only:
                - rework